@startuml


top to bottom direction
skinparam linetype ortho

class App {
  + App(): 
  + start(Stage): void
  + main(String[]): void
}

class Juego {
  - jugador: Jugador
  - mapa: Mapa
  - turnos: Turnos
  + Juego(Jugador jugador, Mapa mapa, Turnos turnos):
  + agregarDefensa(Defensa defensa, Coordenadas coordenadas): void
  + juegoEmpezar(): void
  + gano(): boolean
  + pasarTurno(): void
  + turnoEnemigos(): void
  + perdio(): boolean
}

class Jugador {
  - nombre: String
  - energia: Energia
  - creditos: Creditos
  - muertos: ArrayList<Enemigo>
  + Jugador(int vida, int creditos, String nombre)
  + recibirCreditos(Creditos creditos): void
  + asignarCreditos(Enemigo enemigo): void
  + recibirMuerto(Enemigo enemigo): void
  + sacarCreditos(Creditos creditos): void
  + recibirAtaque(Energia danio): void
  + estaMuerto(): boolean
}

class Turnos {
 - oleadas: ArrayList<ArrayList<Enemigo>>
  + Turnos():
  + agregarEnemigoATurno(int turno, Enemigo enemigo): void
  + generarEnemigos(Camino camino, Jugador jugador): void
}

class Creditos {
  - cantidad: int
  + Creditos(int cantidadCreditos):
  + agregarCreditos(Creditos creditos): void
  + equals(Creditos other): boolean
  + sacarCreditos(Creditos creditos): void
}

interface Recompensa << interface >> {
  + otorgarRecompensa(Jugador jugador): void
}

class RecompensaDoble {
  - cantidadDoble: int
  + otorgarRecompensa(Jugador jugador): void
}

class RecompensaRandom {
  - rango: int
  + otorgarRecompensa(Jugador jugador): void
}

class RecompensaSimple {
  - cantidadBase: int
  + otorgarRecompensa(Jugador jugador): void
}

abstract class Defensa {
  - armas: SistemaDeAtaque
  - turnosRestantes: int
  - coste: Creditos
  + estaEnRango(int distancia): boolean
  + estaOperativa(): boolean
  + atacarEnemigo(Enemigo enemigo, Jugador jugador): void
  + sacarCreditos(Jugador jugador): void
}

class SistemaDeAtaque {
  - rango: int
  - danio: Energia
  + SistemaDeAtaque(Energia danio, int rango):
  + atacar(Enemigo enemigo, Jugador jugador): void
  + estaEnRango(int distancia): boolean
}

class TorreBlanca {
  + TorreBlanca():
}

class TorrePlateada {
  + TorrePlateada():
}

abstract class Enemigo {
  - danio: Energia
  - energia: Energia
  - recompensa: Recompensa
  - velocidad: int
  + recibirDanio(Energia danioRecibido, Jugador jugador): void
  + estaMuerto(): boolean
  + atacar(Jugador jugador): void
  + construirEnemigo(String enemigo): Enemigo
  + getVelocidad(): int
  + setRecompensa(Recompensa nuevaRecompensa): void
}

class Hormiga {
  - recompensa: RecompensaSimple
  - energia: Energia
  - danio: energia
  - velocidad: int
  + Hormiga():
}

class Arania {
  - recompensa: RecompensaRandom
  - energia: Energia
  - danio: energia
  - velocidad: int
  + Arania():
}

class Energia {
  - cantidad: int
  + Energia(int cantidadVida)
  + aumentar(Energia extra): void
  + equals(Energia other): boolean
  + reducir(Energia energiaRestada): void
  + estaMuerto(): boolean
}

class Lector {
  + leerMapa(String mapa): Mapa
  + leerEnemigos(String oleadas): Turnos
}

class Main {
  + Main(): 
  + main(String[]): void
}

class Mapa {
  - tamanoHorizontal: int
  - tamanoVertical: int
  - matriz: ArrayList<ArrayList<Parcela>>
  - camino: Camino
  + Mapa(int tamanoHorizontal, int tamanoVertical):
  + defensasAtacar(Jugador jugador): void
  + mover(Jugador jugador): void
  + agregarDefensa(Defensa defensa, Coordenadas posicion, Jugador jugador): boolean
  + perdio(Jugador jugador): boolean
  + generarEnemigos(Turnos oleada, Jugador): void
  + agregarParcela(int x, int y, Parcela parcela): void
  + gano(Jugador jugador): boolean
}

class Coordenadas {
  - y: int
  - x: int
  + Coordenadas(int x, int y):
  + distancia(Coordenadas other): int
}

class Tierra {
  - defensa: Defensa
  + Tierra(Coordenadas ubicacion):
  + ubicar(Defensa defensa, Jugador jugador): boolean
  + ubicar(Enemigo enemigo, Jugador jugador): boolean
  + atacar(Pasarela pasarela, Jugador jugador): void
}

class Rocoso {
  + Rocoso(Coordenadas ubicacion):
  + ubicar(Defensa defensa, Jugador jugador): boolean
  + ubicar(Enemigo enemigo, Jugador jugador): boolean
}

abstract class Parcela {
  - ubicacion: Coordenadas
  + ubicar(Enemigo enemigo, Jugador jugador): boolean
  + distancia(Parcela other): int
  + ubicar(Defensa defensa, Jugador jugador): boolean
  + construirParcela(String parcela, Coordenadas coordenadas): Parcela
}

class Pasarela {
  - enemigos: ArrayList<Enemigo>
  + Pasarela(Coordenadas ubicacion):
  + ubicacion(): Coordenadas
  + mover(Camino camino, Jugador jugador): void
  + ubicar(Enemigo enemigo, Jugador jugador): boolean
  + estaVacia(): boolean
  + recibirAtaqueDe(Defensa defensa, Jugador jugador): void
  + ubicar(Defensa defensa, Jugador jugador): boolean
}

class Camino {
  - pasarelas: ArrayList<Pasarela>
  + Camino():
  + atacar(Tierra tierra, Jugador jugador): void
  + generarEnemigo(Enemigo enemigo, Jugador jugador): void
  + mover(Jugador jugador): void
  + moverEnemigo(Enemigo enemigo, Pasarela pasarela, Jugador jugador): void
  + tieneEnemigos(): boolean
  + agregarPasarela(Pasarela pasarela): void
  + gano(Jugador jugador): boolean
  + perdio(Jugador jugador): boolean
}

class SystemInfo {
  + SystemInfo(): 
  + javaVersion(): String
  + javafxVersion(): String
}

class ParcelaInvalidaError {
  + ParcelaInvalidaError():
}

class CreditosInsuficientesError {
  + CreditosInsuficientesError():
}

class EnemigoInvalidoError {
  + EnemigoInvalidoError():
}

class NoHayDefensaEnTierraError {
  + NoHayDefensaEnTierraError():
}

class NoSePuedeLeerElMapaError {
  + NoSePuedeLeerElMapaError():
}

class NoSePuedeLeerEnemigosError {
  + NoSePuedeLeerEnemigosError():
}
class RangoInvalidoMapeadoError {
  + RangoInvalidoMapeadoError():
}

class TurnoInvalidoError {
  + TurnoInvalidoError():
}



Arania                      -[#000082,plain]-^  Enemigo                    
Arania                      -[#595959,dashed]->  Energia                    : "«create»"
Arania                      -[#595959,dashed]->  RecompensaRandom           : "«create»"
Camino                     "1" *-[#595959,plain]-> "pasarelas\n*" Pasarela                   
Creditos                    -[#595959,dashed]->  CreditosInsuficientesError : "«create»"
Defensa                    "1" *-[#595959,plain]-> "coste\n1" Creditos                   
Defensa                    "1" *-[#595959,plain]-> "armas\n1" SistemaDeAtaque            
Enemigo                     -[#595959,dashed]->  Arania                     : "«create»"
Enemigo                     -[#595959,dashed]->  EnemigoInvalidoError       : "«create»"
Enemigo                    "1" *-[#595959,plain]-> "energia\n1" Energia                    
Enemigo                     -[#595959,dashed]->  Hormiga                    : "«create»"
Enemigo                    "1" *-[#595959,plain]-> "recompensa\n1" Recompensa                 
Hormiga                     -[#000082,plain]-^  Enemigo                    
Hormiga                     -[#595959,dashed]->  Energia                    : "«create»"
Hormiga                     -[#595959,dashed]->  RecompensaSimple           : "«create»"
Juego                      "1" *-[#595959,plain]-> "jugador\n1" Jugador                    
Juego                      "1" *-[#595959,plain]-> "mapa\n1" Mapa                       
Juego                      "1" *-[#595959,plain]-> "turnos\n1" Turnos                     
Jugador                     -[#595959,dashed]->  Creditos                   : "«create»"
Jugador                    "1" *-[#595959,plain]-> "creditos\n1" Creditos                   
Jugador                    "1" *-[#595959,plain]-> "muertos\n*" Enemigo                    
Jugador                    "1" *-[#595959,plain]-> "energia\n1" Energia                    
Jugador                     -[#595959,dashed]->  Energia                    : "«create»"
Jugador                     -[#595959,dashed]->  RecompensaDoble            : "«create»"
Lector                      -[#595959,dashed]->  Arania                     : "«create»"
Lector                      -[#595959,dashed]->  Coordenadas                : "«create»"
Lector                      -[#595959,dashed]->  Hormiga                    : "«create»"
Lector                      -[#595959,dashed]->  Mapa                       : "«create»"
Lector                      -[#595959,dashed]->  NoSePuedeLeerElMapaError   : "«create»"
Lector                      -[#595959,dashed]->  NoSePuedeLeerEnemigosError : "«create»"
Lector                      -[#595959,dashed]->  Turnos                     : "«create»"
Mapa                       "1" *-[#595959,plain]-> "camino\n1" Camino                     
Mapa                        -[#595959,dashed]->  Camino                     : "«create»"
Mapa                        -[#595959,dashed]->  RangoInvalidoMapeadoError  : "«create»"
Meta                        -[#000082,plain]-^  Pasarela                   
Parcela                    "1" *-[#595959,plain]-> "ubicacion\n1" Coordenadas                
Parcela                     -[#595959,dashed]->  ParcelaInvalidaError       : "«create»"
Parcela                     -[#595959,dashed]->  Pasarela                   : "«create»"
Parcela                     -[#595959,dashed]->  Rocoso                     : "«create»"
Parcela                     -[#595959,dashed]->  Tierra                     : "«create»"
Pasarela                   "1" *-[#595959,plain]-> "enemigos\n*" Enemigo                    
Pasarela                    -[#000082,plain]-^  Parcela                    
RecompensaDoble             -[#595959,dashed]->  Creditos                   : "«create»"
RecompensaDoble             -[#008200,dashed]-^  Recompensa                 
RecompensaRandom            -[#595959,dashed]->  Creditos                   : "«create»"
RecompensaRandom            -[#008200,dashed]-^  Recompensa                 
RecompensaSimple            -[#595959,dashed]->  Creditos                   : "«create»"
RecompensaSimple            -[#008200,dashed]-^  Recompensa                 
Rocoso                      -[#000082,plain]-^  Parcela                    
SistemaDeAtaque            "1" *-[#595959,plain]-> "danio\n1" Energia                    
Tierra                     "1" *-[#595959,plain]-> "defensa\n1" Defensa                    
Tierra                      -[#595959,dashed]->  NoHayDefensaEnTierraError  : "«create»"
Tierra                      -[#000082,plain]-^  Parcela                    
TorreBlanca                 -[#595959,dashed]->  Creditos                   : "«create»"
TorreBlanca                 -[#000082,plain]-^  Defensa                    
TorreBlanca                 -[#595959,dashed]->  Energia                    : "«create»"
TorreBlanca                 -[#595959,dashed]->  SistemaDeAtaque            : "«create»"
TorrePlateada               -[#595959,dashed]->  Creditos                   : "«create»"
TorrePlateada               -[#000082,plain]-^  Defensa                    
TorrePlateada               -[#595959,dashed]->  Energia                    : "«create»"
TorrePlateada               -[#595959,dashed]->  SistemaDeAtaque            : "«create»"
Turnos                      -[#595959,dashed]->  TurnoInvalidoError         : "«create»"
@enduml
