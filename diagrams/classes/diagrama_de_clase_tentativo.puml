@startuml
'https://plantuml.com/class-diagram

class Camino {
    -pasarelas: ArrayList<Pasarela>
    +Camino(Pasarela meta)
    +agregarPasarela((Pasarela pasarela): void
    +mover(Jugador jugador): void
    +moverEnemigo(Enemigo enemigo, Pasarela pasarela, Jugador jugador): void
    +tieneEnemigos(): bool
    +gano(Jugador jugador): bool
    +perdio(Jugador jugador): bool
}

class Mapa {
    -tamanoHorizontal: int
    -tamanoVertical: int
    -matriz: ArrayList<ArrayList<Parcela>>
    +Mapa(int tamanoHorizontal, int tamanoVertical)
    +agregarParcela(int x, int y, Parcela parcela): void
    +tamanoTotal(): int
}

class Coordenadas {
    -x: int
    -y: int
    +Coordenadas(int x, int y)
    +distacia(Coordenadas other): int
}

class Creditos {
    -cantidad: int
    +Creditos(int cantidadCreditos)
    +equals(Creditos other): bool
    +sacarCreditos(Creditos creditos): void
    +agregarCreditos(Creditos creditos): void
}

interface  Recompensa {
    +otorgarRecompensa(Jugador jugador): void
}

class RecompensaSimple{
    -cantidadBase: int
    +otorgarRecompensa(Jugador jugador): void
}

class RecompensaDoble{
    -cantidadDoble: int
    +otorgarRecompensa(Jugador jugador): void
}

class RecompensaRandom{
    -rango: int
    +otorgarRecompensa(Jugador jugador): void
}

abstract class Defensa {
    -armas: SistemaDeAtaque
    -turnosRestantes: int
    -coste: Creditos
    +estaOperativa(): bool
    +atacarEnemigo(Enemigo enemigo, Jugador jugador): void
    +sacarCreditos(Jugador jugador): void
    +estaEnRango(int distancia): bool
}

class SistemaDeAtaque {
    -rango: int
    -danio: energia
    +SistemaDeAtaque(Energia energia, int rango)
    +estaEnRango(int distancia): bool
    +atacar(Enemigo enemigo, Jugador jugador): void
}

class TorreBlanca {
    -coste: Creditos
    -armas: SistemaDeAtaque
    -turnosRestantes: int
}

class TorrePlateada {
    -coste: Creditos
    -armas: SistemaDeAtaque
    -turnosRestantes: int
}

abstract class Enemigo {
    -energia: Energia
    -danio: Energia
    -velocidad: int
    -recompensa: Recompensa
    +construir(Enemigo enemigo): Enemigo
    +recibirDanio(Energia danioRecibido, Jugador jugador): void
    +setRecompensa(Recompensa nuevaRecompensa): void
    +estaMuerto(): bool
    +getVelocidad(): int
    +atacar(Jugador jugador): void
}

class Hormiga {
    -recompensa: RecompensaSimple
    -energia: Energia
    -danio: Energia
    -velocidad: int
}

class Arania {
    -recompensa: RecompensaRandom
    -energia: Energia
    -danio: Energia
    -velocidad: int
}

class Jugador {
    -nombre: String
    -energia: Energia
    -creditos: Creditos
    -muertos: ArrayList<Enemigo>
    +Jugador(int vida, int creditos, String nombre)
    +getVida(): Energia
    +getCreditos(): Creditos
    +recibirAtaque(Energia danio): void
    +estaMuerto(): bool
    +recibirCreditos(Creditos creditos): void
    +sacarCreditos(Creditos creditos): void
    +recibirMuerto(Enemigo enemigo): void
    +asignarCreditos(Enemigo enemigo): void
}

class Meta {
    +Meta(Coordenadas ubicacion)
    +ubicar(Enemigo enemigo, Jugador jugador): bool
}

abstract class Parcela {
    -ubicacion: Coordenadas
    +construirParcela(String parcela, Coordenadas ubicacion): Parcela
    +ubicar(Defensa defensa, Jugador jugador): bool
    +ubicar(Enemigo enemigo, Jugador jugador): bool
    +distacia(Parcela other): int
}

class Pasarela {
    -enemigos: ArrayList<Enemigo>
    +Pasarela(Coordenadas ubicacion)
    +ubicar(Defensa defensa, Jugador jugador): bool
    +ubicar(Enemigo enemigo, Jugador jugador): bool
    +recibirAtaqueDe(Defensa defensa, Jugador jugador): void
    +mover(Camino camino, Jugador jugador): void
    +estaVacia(): bool
}

class Rocoso {
    +Rocoso(Coordenadas ubicacion)
    +ubicar(Defensa defensa, Jugador jugador): bool
    +ubicar(Enemigo enemigo, Jugador jugador): bool
}

class Tierra {
    -defensa: Defensa
    +Tierra(Coordenadas ubicacion)
    +ubicar(Defensa defensa, Jugador jugador): bool
    +ubicar(Enemigo enemigo, Jugador jugador): bool
    +atacar(Pasarela pasarela): void
}

class Energia {
    -cantidad: int
    +Energia(int cantidadVida)
    +Equals(Energia other): bool
    +reducir(Energia energiaRestada): void
    +aumentar(Energia extra): void
    +estaMuerto(): bool
}

class Turnos {
    -turnos: ArrayList<ArrayList<Enemigo>>
    -cantidadTurnos: int
    -siguienteTurno: int
    +Turnos()
    +agregarEnemigoAturno(int turno, Enemigo enemigo): void
    +pasarTurno(Camino camino): void
}

class Lector {
    +leerMapa(String rutaArchivo): Mapa
    +leerEnemigos(String rutaArchivoTurnos): Turnos
}

class CreditosInsuficientesError {}
class EnemigoInvalidoError {}
class NoHayDefensaEnTierraError {}
class NoSePuedeLeerElMapaError {}
class NoSePuedeLeerEnemigosError {}
class ParcelaInvalidaError {}
class RangoInvalidoMapeadoError {}
class TurnoInvalidoError {}

class App {
    +main(String[] args): void
    +start(Stage stage): void
}

class Main {
    +main(String[] args): void
}

class SystemInfi {
    +javaVersion(): String
    +javafxVersion(): String
}





@enduml